//---------------------------Booting and Ending--------------------------

//This .dic file is set aside for booting and ending dialogue, as well as a few other functions.

/* This file has:
OnFirstBoot
NameInput
First pronoun stuff
GetDaySlot/GetTimeSlot
OnBoot
normalboottalk
OnClose
OnWindowStateRestore
OnGhostChanging
OnGhostChanged
OnShellChanging
OnShellChanged
OnDressupChanged
*/


//--OnFirstBoot--

//*********************Advanced User Info*******************************
//Because this only runs once and under an odd set of circumstances, it can be hard to test if this function is working properly. Trying to run the entire function using \![raise,OnFirstBoot] will instead bring up your alternate dialogue, so sadly you can't check it that way. You CAN get it to run using \![raise,OnFirstBoot,0] though.
//***********************************************************************

// DICLOAD ( filename , [ code ] )
// ^ remember you need to initialize this for every shell. 
//"Peanut" is very mature

OnFirstBoot
{
//OnFirstBoot begins with some code at first to define some values your ghost will be using.

 	lastTalk = "" //This is part of how chained conversations work (see aitalk.dic).
	TrainerID = 0
	passhour = 0
	passmin = 0 
	passsec = 0 // These keep track of the time.
 	username         = "Trainer" //This sets a temporary name for the user. It'll be replaced when they tell the ghost their name.
	stroke           = 0	// Sets their being-pet state to zero.
 	teachusername    = 0	// Related to them learning your name.
	mikireflag       = 0	// Determines behavior at certain points.
 	aitalkinterval = 300 //Their default talk rate.
 	birthdayprint = "????" //A temporary value for the user's birthday.
	talktime = "5 minutes" //How the value aitalkinterval will display in the config menu.
	deleteshitai = "OFF" //Sets whether or not the user can uninstall the ghost to "OFF". The user can change it later in the config menu (see menu.dic). 
	nowshell = "master" //This is for a special if check in aitalk.dic to see what shell the ghost is using. You should use the name of your default shell folder here.
	firstboot = 1 //This marks that this is the first time you've run the ghost. It's so it won't reroute to general name changing dialogue when the user inputs their name.
	
	if reference0 == 0 
 	{
		//need to generate a trainerID here. This will Store the original Owner of the Pokemon for PokeID generation
		if TrainerID == 0
		{
			
		}
		//Unlike most dialogue, it should start with "\![enter,passivemode]". Passivemode basically ensures that the balloons won't disappear, the choices won't time out, the ghosts won't talk randomly, you can't bring up menus, and makes sure that this dialogue plays through to the end correctly.
		
		"\![enter,passivemode]\1\s[10]\0\s[0]Hello, and welcome to the Poke!Partner Program! I'm Professor Azalea, and I'm thrilled to have a new member!\nAs explained on the sign up sheet, this program is for studying the daily life and relationships between Trainers and their pokemon(WIP, come back later).\e"
		"\1\s[10]Now that the pronouns are set, we will ask for the user's name. \![leave,passivemode]\w8\0\s[0]What is your name, user? \![open,inputbox,OnNameTeach,-1]\e"
		
		//Make sure to set up poses for both characters right when you start, otherwise one will be invisible until they speak.
		//Note also the use of the \x and \c tags.
 	}
	else
 	{
		//---- This is dialogue for when the user uninstalls the ghost for whatever reason, then reinstalls them again. They will run this dialogue instead of their normal dialogue above. You'll see this if you try to run OnFirstBoot using ![raise] without the extra 0 as mentioned above.
 		{
 		"\1\s[10]\0\s[0]This is the OnFirstBoot dialogue if we've been uninstalled and reinstalled.\e"
		}
 	}
}

//--timeslot

//This is another unique function to tell what time of day it is. This is used for specialized dialogue related to the day.

timeslot
{
	if hour >= 5 && hour <= 8
	{	"earlymorning"	}
	elseif hour >= 9 && hour <= 11
	{	"morning"	}
	elseif hour >= 12 && hour <= 14
	{	"lunch"	}
	elseif hour >= 15 && hour <= 17
	{	"afternoon"	}
	elseif hour >= 18 && hour <= 20
	{	"evening"	}
	elseif hour >= 21 && hour <= 24
	{ "latenight"	}
	else
	{ "midnight" }
}

//--dayslot

//Like the above, but to find out what day it is. You can primarily use this for specialized dialogue on certain days, like the user's birthday.
dayslot
{
	"%(month)month %(day)day"
}


//-----------------------Normal Booting----------------------------

//From this point on, the dialogue will be for any normal boot of your ghost. You can specialize this for certain days or times if you like, or if you're uninterested, leave it very simple.


//--OnBoot

//As you can probably guess, OnBoot runs when you boot your ghost.
//*********************Advanced User Info*******************************
//You can also stick any values you want to reset on boot into their own function, like "BootReset", then run BootReset instead during boot so it's a bit less unwieldy.
//***********************************************************************

OnBoot
 {
	lastTalk = "" 
	passhour = 0
	passmin = 0
	passsec = 0
	
 	"\0\s[0]\1\s[10]" //This sets them up in their neutral pose for now.	
	--
	
	if dayslot == userbirthday 	
	{
				"\0\s[0]It's %(bornmonthprint) %(borndayprint).\w8\1\s[10]Happy birthday, %(username).\e" 
				
				//Notice in this dialogue that there are two new envelopes, %(bornmonthprint) and %(borndayprint). These two things basically display the user's birthday - bornmonthprint is the month and borndayprint is the day.
	}
	
	elseif dayslot == "6month 6day" //Like above, this if statement is checking the date. It's looking for the sixth month and the sixth day.	
	{
				"\0\s[0]Today is June 6th.\e"
	}
	elseif dayslot == "7month 4day"
	{
				"\1\s[10]It's the fourth of July.\e"
	}
	else
	{
		"%(normalboottalk)" //If none of the days above match the current date, the ghost instead will go down to the next function, normalboottalk.
	}
}


//--normalboottalk

//normalboottalk will vary their dialogue in a few different ways depending on the time and weekday.

normalboottalk
{
	if weekday == 6 && hour >= 19 //This checks if the weekday equals six, meaning saturday AND (using the && operator) if the hour is past 19.
		{
		"\0\s[0]It's Saturday night.\e"
		}
	elseif RAND(100) < 40 //What this does is choose a random number from 1-100, and then checks if that number is less than 40. If it's less than forty, then these dialogue pieces will occur.
		{
		"\0\s[0]This is one of the random boot conversations.\w8\1\s[10]The random number drawn was less than forty.\e"
	
		"\1\s[10]This is another one of the random boot conversations.\w8\0\s[0]The random number was again less than forty.\e"
	
		"\0\s[0]This is the third random boot conversation.\w8\1\s[10]The random number was less than forty.\e"
		}
 	else
 	{
		//The following if statements check the time of the day as defined above in the GetTimeSlot function.
		
		if timeslot == "earlymorning"
		{
		"\0\s[0]This is an early morning boot dialogue.\w8\1\s[10]Between the hours of five and eight.\e"
		
		"\1\s[10]This is another early morning boot dialogue.\w8\0\s[0]Again, between the hours of five and eight.\e"
		
		"\1\s[10]This is the third early morning boot dialogue.\w8\0\s[0]Between the hours of five and eight.\e"
		}
		elseif timeslot == "morning"
		{
		"\0\s[0]This is a morning boot dialogue.\e"
		
		"\1\s[10]This is another morning boot dialogue.\w8\0\s[0]Yup.\e"
		}
		elseif timeslot == "lunch"
		{
		"\0\s[0]This is a lunch boot dialogue.\1\s[10]Sure is.\e"
		
		"\1\s[10]This is another lunch boot dialogue.\e"
		}
		elseif timeslot == "afternoon"
		{
		"\1\s[10]This is an afternoon boot dialogue.\w8\0\s[0]That it is.\e"
		}
		elseif timeslot == "evening"
		{
 		"\0\s[0]This is an evening boot dialogue.\1\s[10]Between the hours of 18 and 20.\e"
		}
		elseif timeslot == "latenight"
		{
 		"\0\s[0]This is a late night boot dialogue.\1\w8\s[10]Between 21 and 24.\e"
		
 		"\0\s[0]This is another late night boot dialogue.\1\w8\s[10]That it is.\e"
		
 		"\1\s[10]This is the third late night boot dialogue.\w8\0\s[0]Between 21 and 24.\e"
		}
		else //the last timeslot we haven't done is midnight, which is what's under here.
		{
		"\0\s[0]This is a middle of the night boot dialogue.\1\w8\s[10]From midnight to five.\e"
		
 		"\0\s[0]This is another middle of the night boot dialogue.\1\w8\s[10]That it is.\e"
		
 		"\1\s[10]This is the third middle of the night boot dialogue.\w8\0\s[0]Very late at night.\e"
		}
	}
}


//--OnClose

//OnClose runs when you close your ghost. Like OnBoot, this can be customized for times and days if you like, as you saw above. It can also be easily simplified down to. Although do note, close dialogue must end with a \- instead of \e. \- will close the program.
//Note though that each bit here ends with \w8 instead of \e. That's because the actual end statement to close the ghost is at the very end, one of the very very rare times you won't have to end a line with \e. Instead, end it with \w8 so there's a little bit of a pause for the user before your ghost closes so they can read the last message.

OnClose
 {
	if passmin >= 5 || passhour > 0	//This checks to see if you've had them open for at least five minutes.
		{
			if RAND(100) < 40 //see above about the random number generator
			{
				"\0\s[0]This is a random close dialogue.\w8\1\s[10]The random number generator chose something below 40.\w8\w8"
			}
			else
			{
			if timeslot == "earlymorning"
				{
					"\1\s[10]This is an early morning close dialogue.\w8\0\s[0]From 5 to 8.\w8"
					
					"\0\s[0]This is another early morning close dialogue.\w8\1\s[10]Yup.\w8\w8"
				}
			elseif timeslot == "morning"
 				{
 					"\0\s[0]This is a morning close dialogue.\w8\w8"
 				}
 			elseif timeslot == "lunch"
 				{
 					"\0\s[0]This is a lunch close dialogue.\w8\1\s[10]Yup.\w8"
					
 					"\0\s[0]This is another lunch close dialogue.\w8\1\s[10]In the middle of the day.\w8"
 				}
 			elseif timeslot == "afternoon"
 				{
 					"\0\s[0]This is an afternoon close dialogue.\w8\1\s[10]Done.\w8"
					
 					"\1\s[10]This is another afternoon close dialogue.\w8\0\s[0]Yup.\w8"
 				}
  			elseif timeslot == "evening"
 				{
 						if weekday == 6
 						{
 							"\0\s[0]This is a Saturday evening close dialogue.\w8\1\s[10]Somewhat specific.\w8"
 						}
 						else //if it's not saturday, then it'll do this dialogue instead.
 						{
 							"\0\s[0]This is an evening close dialogue.\w8\1\s[10]Bye.\w8"
							
 							"\1\s[10]This is another evening close dialogue.\w8\0\s[0]Yup.\w8"
 						}
 				}
			elseif timeslot == "latenight"
			 	{
 						if weekday == 6
 						{
 							"\0\s[0]This is a late Saturday night close dialogue.\w8"
							
 							"\1\s[10]This is another late Saturday night close dialogue.\w8\0\s[0]Yup.\w8"
 						}
						
 						"\1\s[10]This is a late night close dialogue.\w8\0\s[0]That it is.\w8"
						
						"\0\s[0]This is another late night close dialogue.\w8\1\s[10]Done.\w8"
 				}
			else //like above, this is the midnight time slot since it's the last one left.
 				{
 						if weekday == 0 //checking if it's the middle of the night on Sunday
 						{
 							"\1\s[10]This is a middle of the night Sunday close dialogue.\w8\0\s[0]From midnight to five AM on Sunday.\w8"
 						}
						"\0\s[0]This is a middle of the night close dialogue.\w8\1\s[10]Very late at night.\w8"
						
						"\1\s[10]This is another middle of the night close dialogue.\w8"
						
						"\1\s[10]This is the third middle of the night close dialogue.\w8\0\s[0]So it is.\w8"
				}
			}
				
 		}
 		
 		
 	else //This dialogue is for if they haven't been open for at least five minutes.
 	{
 		"\0\s[0]This dialogue is for closing us before five minutes have passed.\w8\w8"
		
 		"\1\s[10]This is another bit of dialogue for closing us before five minutes have passed.\w8\0\s[0]Quickly done.\w8\w8"
 	}
 	--
	"\-\e" //this bit of code actually closes and ends the ghost. Because \e is here, you don't have to end each line above with it.
 }


 //-------------------------State Changing--------------------
 //From here on, most of the dialogue will have to do with changing shells, ghosts, or states in some way.
 
 
 //--OnWindowStateMinimize

//This will run when you minimize them.

 OnWindowStateMinimize
 {
	"\0\s[0]This dialogue means we're being minimized.\w8\1\s[10]Gonna get tiny for a bit.\e"
}

//--OnWindowStateRestore

//This will run when they come back up.

OnWindowStateRestore
 {
	"\0\s[0]This dialogue means we were minimized.\w8\1\s[10]Then brought back up.\e"
}


//--OnGhostChanging

OnGhostChanging
 {
	if reference0 == "Girl" //Replace this with the name of your Sakura character as you put in install.txt or descript.txt.
	{
		"\0\s[0]This dialogue is for us reloading ourselves.\w8\w8\e"
	}
 	else //If you're switching to another Ghost.
	{
		"\0\s[0]This dialogue means we are switching to %(reference0).\w8\1\s[10]Bye.\w8\w8\e"
		
		//In OnGhostChanging, %(reference0) stores the name of the ghost being swapped to, so if you want to display what you're switching to, you can use %(reference0) as in this example.
	}
}


//--OnGhostChanged

//A sister to the above, this runs after the ghost has either reloaded itself, or when you switch from another ghost to this ghost.

OnGhostChanged
{
	"\0\s[0]\1\s[10]" //this sets up their default poses
	--
	if reference0 == "Girl" //As above, this should be the name of your ghost as in install.txt or descript.txt.
	{
		"\0\s[0]We have reloaded ourselves.\1\w8\s[10]Sure have.\e"
	}
	else
	{
		"\1\s[10]Goodbye, %(reference0).\w8\0\s[0]Someone switched from you to us.\e"

		//Again, %(reference0) in this function is the name of the ghost in question.
	}
}


//--OnShellChanging

//This will run when you change your ghost's shell.

OnShellChanging
 {
	if reference0 == "Hypothetical Shell that doesn't actually exist" //reference0 in OnShellChanging is the name of the shell you're swapping to. It should be defined in the descript.txt file in your shell folder. If you do have alternate shells, put in the right name here.
	{
	"\1\s[10]This dialogue is specifically for changing to this particular shell.\w8\0\w8\s[9]It totally exists.\w8\e"
	}
	else //if you don't have any specific dialogue for a specific shell
	{
	"\0\s[0]This dialogue is for changing shells.\w8\1\s[10]Sure is.\w8\e"
	
	"\1\s[10]This is another bit of dialogue for changing shells.\w8\0\s[8]I wonder how many people will actually have multiple shells?\e"
	}
 }
 
 
 //--OnShellChanged
 
 //The sister to the above, this is the dialogue after you've changed the shell.

OnShellChanged
 {
 	if reference0 == "GT Default Shell" //Again, this is the name of your shell as you put in the descript.txt file for that shell.
 	{
 		nowshell = "master" //This is the folder name for your shell. Not the same as the above! 
		
 		"\0\s[0]This dialogue is for switching to our default shell.\w8\1\s[18]No really, will anyone actually put in the work to use these functions?\w8\0\s[9]\n\n[half]Shh.\e"
 	}
 	elseif reference0 == "Hypothetical Shell that doesn't actually exist"
 	{
 		nowshell = "totallyrealshell"
		
 		"\0\s[0]This dialogue is for switching to that hypothetical shell.\e"
		
 		"\0\s[0]This is another bit of dialogue for switching to this hypothetical shell.\w8\1\s[18]Man if you actually use this, you should tell Zar, it'll blow her mind.\w8\0\n\n[half]\s[9]Shut up, we're not supposed to be in-character here.\e"
 	}
 	elseif reference0 == "Another totally real shell wow"
 	{
 		nowshell = "thiswouldbesomuchwork"
		
 		"\1\s[10]This dialogue is after we've switched to another totally real shell.\e"
 	}
 	else //For any shell without a specific name, or if you don't want to bother with individual responses to a shell.
 	{
	"\0\s[0]This dialogue is after we've changed our shell to %(reference[0]).\w8\1\s[18]How many shells you got?\e"
	
	//Note the %(reference[0]) here! This time that should store the name of whatever shell you're switching to.
	}
 }


 //--OnDressupChanged
 
 //This runs whenever you fiddle with their clothing via the dress-up option, if you've set any for your ghost.

OnDressupChanged
{
if reference0 == 0 //in OnDressupChanged, reference0 refers to the character, therefore this is evaluating which character in question is getting dressed up. 0 is the main character.
	{
	if reference1 == "Clothing for Girl" //This is the name of the clothing item in the descript.txt file, I'm pretty sure.
		{
			if reference2 == 1 //This checks if you're putting it on.
			{
			"\0\s[0]You put my clothing item on me.\w8\1\s[19]lol like zar would ever bother with clothes for a ghost.\w8\0\s[9]\n\n[half]Shut up dude you're going to get us in trouble.\e"
			}
			else // This checks if you're taking it off.
			{
			"\0\s[0]You took the clothing item off.\e"
			}
		}		
	}
else //if reference0 isn't the main character, then it has to be the side character.
	{
	if reference1 == "some kind of clothing for triangle??" //The name of the item of clothing in the descript.txt file in your shell folder.
		{
			if reference2 == 1 //If you put it on
			{
			"\1\s[10]I'm wearing some kind of clothing.\w8\0\s[8]Maybe a hat?\e"
			}
			else //When you take it off.
			{
			"\1\s[10]You took off some kind of clothing.\e"
			}
		}
	elseif reference1 == "i'm gonna say a propeller beanie"
		{
			if reference2 == 1 //if you're putting it on
			{
			"\1\s[10]You put a hat on me.\w8\0\s[6]lol.\w8\1\n\n[half]\s[11]Shaddap.\e"
			}
			else //when you take it off
			{
			"\1\s[10]You took off the hat.\e"
			}
		}
	}
}

OnPBF //pokemon first boot
{
	
}

OnPBG //pokemon boot generation
{
	//shiny chance here
	
	//nature chance here
	
	//Liked Flavor chance here
}
