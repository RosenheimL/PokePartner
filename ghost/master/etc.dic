//---------------------------Miscellaneous Functions--------------------------

//This .dic file is concerned with a number of functions that didn't quite fit in anywhere else.

/*
This file has...

OnFileDrop2
OnInstallBegin
OnInstallComplete
OnInstallFailure
OnInstallRefuse
OnVanishSelecting
OnVanishSelected
OnVanishCancel
OnVanishButtonHold
OnVanished
OnBIFFBegin
OnBIFFComplete
OnBIFFFailure
OnUpdateBegin
OnUpdateReady
OnUpdateComplete
OnUpdateFailure
OnUpdate.OnDownloadBegin
OnUpdate.OnMD5CompareBegin
OnUpdate.OnMD5CompareComplete
OnUpdate.OnMD5CompareFailure
OnHeadlinesenseBegin
OnHeadlinesense.OnFind
Select.Headline_Cancel
OnHeadlinesenseComplete
OnHeadlinesenseFailure
OnUpdatedataCreating
OnUpdatedataCreated
OnNarCreating
OnNarCreated
OnSNTPBegin
OnSNTPCompare
OnSNTPEXECUTE
OnSNTPCANCEL
OnSNTPFailure
OnDisplayChange
OnScreenSaverStart
OnScreenSaverEnd
OnApplicationBoot
OnApplicationClose
OnApplicationFileOpen
OnBatteryLow
OnBatteryCritical
OnShellScaling
*/


//--OnFileDrop2

//OnFileDrop2 handles how your ghost will set an image as the desktop background when someone drags and drops an image on them.

OnFileDrop2
{
	_filepath = SPLITPATH(reference0)
	_filename = _filepath[2]
	_fileext = TOLOWER(_filepath[3])
	case _fileext
	{
		when ".jpg", ".jpeg", ".bmp", ".png" //These are the formats your ghost will recognize as image files to set as the background.
		{
			Wallpaperfile = reference0
			
			"\0\s[0]The file you dropped is %(_filename)%(_fileext).\w8\1\s[10]How would you like us to set this picture as your wallpaper?\n\n[half]/
			\![*]\q[Centered,SetWallpaper_0]\n/
			\![*]\q[Tiled,SetWallpaper_1]\n/
			\![*]\q[Stretched,SetWallpaper_2]\n\n[half]/
			\![*]\q[No thanks,SetWallpaper_Cancel]\e"
		}
		when ".mid", ".wav", ".mp3", ".wma", ".au" //Other file formats you might want to give your ghost a specific response to.
		{
			"\1\s[10]%(_filename)%(_fileext) is a music file.\e"
		}
		others //Any other file format. As a note here, if you drop something ghost-related on them that does not have an install.txt, then they won't install it and will just say this response. If you are testing your balloon or nar files and you get this response instead of a proper installation, you should check and make sure you have an install.txt in the file!
		{
			"\0\s[0]This is %(_filename)%(_fileext).\e"
		}
	}
}

//This set of options sets the wallpaper up.

Select.SetWallpaper_0
{
	"\![set,wallpaper,%(Wallpaperfile),center]\0\s[0]The image is centered.\e"
}
Select.SetWallpaper_1
{
	"\![set,wallpaper,%(Wallpaperfile),tile]\0\s[0]The image is tiled.\e"
}
Select.SetWallpaper_2
{
	"\![set,wallpaper,%(Wallpaperfile),stretch]\0\s[0]The image is stretched.\e"
}
Select.SetWallpaper_Cancel
{
	"\0\s[0]You don't want to set the file as your desktop background.\1\s[10]Kay.\e"
}


 //---- OnInstallBegin -------------------------------------------------------
 //OnInstallBegin is called when a file with an included install.txt is dropped on your ghost. This primarily means things like .nar files for other ghosts or .zip files containing balloons or shells for your ghosts. Primarily ghost-related things.
 
OnInstallBegin
 {
	"\0\s[0]This is the beginning dialogue for installing a file.\w8\1\s[10]This zip or nar contains an install.txt file.\e"
 }

 //---- OnInstallComplete -------------------------------------------------------
 //OnInstallComplete runs once the file above has finished installing.
 
OnInstallComplete
 {
	"\0"
 	--
	if reference0 == "shell" //This is checking to see if what you installed is classified as a shell in the install.txt.
 	{	
		if reference1 == "Hypothetical Shell that doesn't actually exist" //This is the name of your shell as you defined in descript.txt in the shell folder.
		{
		"\s[0]We have installed Hypothetical Shell.\w8\1\s[10]Truncated for space.\e"
		}
		elseif reference1 == "Another totally real shell wow"
		{
		"\s[0]We have installed another totally real shell.\e"
		}
		else //For any other shell they may install.
		{
		"\s[0]We've installed a new shell.\w8\1\s[10]It's called  %(reference1).\e"
		//%(reference1) here would be the name of the shell they installed.
		}
 	}
	elseif reference0 == "ghost" //if the type of the file they're installing is a ghost.
 	{
		"\s[0]We've installed a new Ghost.\w8\1\s[10]It's called %(reference1).\e"
		//Reference1 here would be the name of the ghost.
 	}
	elseif reference0 == "balloon" //if the type of file is a balloon
 	{
		"\s[0]We've installed a new balloon.\w8\1\s[10]It's called %(reference1).\e"
		//Reference1 here would be the name of the balloon.
 	}
	elseif reference0 == "plugin" //if the type of file is a plug-in, like a saori of some kind.
 	{
		"\s[0]We've installed a plug-in.\w8\1\s[10]It's called %(reference1).\e"
		//Reference1 here would be the name of the plug-in.
 	}
	elseif reference0 == "calendar skin" //if the type of file is a calendar skin
	{
		"\s[0]We've installed a calendar skin.\w8\1\s[10]It's called %(reference1)."
	}
	elseif reference0 == "headline" //if the file/url you drop on them is counted as a headline. To be honest with you I don't know what determines whether a url is a headline or what.
	{
		"\0\s[0]We've set up a headline.\w8\1\s[10]It's called %(reference1).\e"
	}
	elseif reference0 == "rss" //this is more clearly for when you drag an rss feed onto your ghost.
	{
		"\0\s[0]We've set up a headline.\w8\1\s[10]It's called %(reference1).\e"
	}
	else //for any other file they'd install
	{
		"\s[0]We installed %(reference1)."
	}
}

//---- OnInstallFailure -------------------------------------------------------
//If the file you dropped fails to install for one reason or another.

OnInstallFailure
 {
	"\0\s[0]The installation has failed.\n\n[half]\w5"
	--
	if reference0 == "unsupported" //These if statements determine how it happened to finish the piece of dialogue. This checks if the reason it failed is because it was unsupported.
	{
	"This file is unsupported.\e"
	}	
	elseif reference0 == "extraction" //This checks if the file didn't extract properly.
	{
	"The file could not be extracted properly.\e"
	}
 }
 
 //--OnInstallRefuse
 //If the file you dropped can't be installed with this ghost.
 
OnInstallRefuse
 {
	"\0\s[0]We can't install this. \w4It may be for %(reference0) instead.\e"
	
	//reference0 in this function refers to the ghost this file is associated with, probably the name of the ghost listed in its install.txt file. You would see this if you dropped a shell made for a different ghost on your current ghost, for example.
 }


//**** Uninstallation ******************************************
//You may have noticed in the configuration menus in menu.dic an option to turn Uninstall on or off, as well as a greyed out option to uninstall in the right click menu.

//--OnVanishSelecting
//When you select the uninstall option in the menu.

OnVanishSelecting
{
	"\0\s[0]The user is deciding whether or not to uninstall us.\w8\1\s[10]If you're testing this, be careful about what you click here, huh?\e"
}

//OnVanishSelected
//When you decide to uninstall them. 

OnVanishSelected
{
	"\0\s[0]The user has decided to uninstall us.\w8\1\s[10]Bye.\w9\w9\e"
}


//--OnVanishCancel
//If you select Uninstall from the menu, but decide not to do it.

OnVanishCancel
{
	"\0\s[0]The user has decided not to uninstall us after all.\e"
}

//--OnVanishButtonHold
//This should trigger if you double click the ghost's balloon in the middle of OnVanishSelected above. So it basically cancels their uninstallation. I'd be pretty careful about testing this, and I'd probably just put the line of dialogue into their script input and test it that way instead.

OnVanishButtonHold
{
	"\1\s[10]This dialogue displays when the user double clicks on the balloon when we're saying we're going to uninstall ourselves.\e"
}


 //---- OnVanished -----------------------------------------
 //OnVanished is a weird little function. Basically, if you uninstall a ghost, it'll automatically go back to the last ghost you were using. They'll then say this line of dialogue about the ghost you just uninstalled. Make sure to set up both their poses immediately so they both appear when it switches back to them.
 
OnVanished
 {
	"\0\s[0]\1\s[10]%(reference0) has been uninstalled.\w8\0\s[0]Harsh.\e"
	
	//reference0 here is the name of the other ghost.
}


//**** Mail Checking *******************************************************************
//The next set of functions have to do with checking your email.


 //---- OnBIFFBegin ---------------------------------------------------------------
 //When you first tell the ghost to check your email.
 
OnBIFFBegin
 {
	"\0\s[0]This is the starting dialogue for checking email.\e"
	
	"\1\s[10]This is another starting dialogue for checking email.\e"
 }

 
 //---- OnBIFFComplete ---------------------------------------------------------------
 //After they've succeeded in checking your mail, they'll report back with how many new emails you have.
 
OnBIFFComplete
 {
	if reference0 == 0 //If you have no new mail.
 	{
 		"\0\s[0]There is no new mail.\e"
	}
	elseif reference0 == 1 //If you have one new email.
 	{
 		"\0\s[0]There is one new email.\e"
	}
	elseif reference0 > 1 && reference0 < 11 //If you have more than one email but less than eleven.
	{
		"\0\s[0]There are %(reference0) emails.\e"
		//reference0 here stores the amount of new email it finds.
	}
	elseif reference0 > 100 //If there are over one hundred new emails.
	{
		"\0\s[0]There are %(reference0) emails unread.\w8\1\s[10]Woah.\e"
	}
 	else //For any other number of emails.
	{
		"\0\s[0]There are %(reference0) emails.\e"
 	}
}

 //---- OnBIFFFailure ---------------------------------------------------------------
 //Various error messages that can happen when your ghost tries to connect to an email account.
 
OnBIFFFailure
 {
	if reference0 == "timeout" //If the connection times out.
 	{
 		"\0\s[0]The connection has timed out.\e"
	}
 	elseif reference0 == "kick" //If the account blocks the ghost from accessing it. I think gmail may do this at first to try and protect your account from unapproved applications using it. It gives you the option to change the setting in the warning email they send you about it.
	{
		"\0\s[0]We can't access the account.\e"
 	}
	elseif reference0 == "defect" //If the information put into the POP menu is wrong.
 	{
 		"\0\s[0]The email account was not set up properly.\w8\1\s[10]It can be reset at the POP menu.\w8\![open,configurationdialog,biff]\e"
		
		//Note that this ends with \![open,configurationdialog]. This will open up the preferences menu I described above automatically.
	}
 	else //if there's some other kind of error.
	{
		"\0\s[0]We can't connect to the account.\w8\1\s[10]The error returned is '%(reference[0])'.\e"
		
		//reference0 here stores the error message the email server would have given the ghost, hopefully.
 	}
}


 //**** Network Update *****************************************************************
 //The following functions are for the Network Update of your ghost, where it will connect to your website, check for new files, and update itself.
 
 //You can easily test these messages using the Developer panel. Go to Open at the bottom of it and choose one of the four Update Event options to simulate a Ghost's update process.
 
 //---- OnUpdateBegin -------------------------------------------------------------
 //When you first tell your ghost to update. Note that they end with \w8 to give a little breather time.
 
OnUpdateBegin
 {
	"\0\s[0]Starting the update process.\w8\e"
	
	"\1\s[10]Another message for starting the update process.\w8\0\s[0]Hope you read the directions properly.\w8\e"
 }

 //---- OnUpdateReady ---------------------------------------------------------
 //If the ghost finds new files to update with.
 
OnUpdateReady
 {
 
	reference0++ //makes sure it starts at 1 instead of 0
	
    "\1\s[10]There are %(reference0) new files.\w8\e"
	
	//reference0 here storing the number of new files. You don't have to use it if you don't want to.
 }


//---- OnUpdateComplete -------------------------------------------------------------
//When the ghost has finished the update process.

OnUpdateComplete
 {
	if reference0 == "none" //if the ghost had nothing to update with
 	{
 		"\1\s[10]There are no new files.\e"
		
		"\1\s[10]This is another message about there being no new files to update with.\e"
	}
 	else //if the ghost has updated successfully
	{
		"\1\s[10]Update successful!\e"
 	}
}

 //---- OnUpdateFailure -------------------------------------------------------------
 //Error messages if the update process fails in some way.
 
OnUpdateFailure
 {
	if reference0 == "timeout" //if the connection times out
 	{
 		"\1\s[10]The update connection has timed out.\e"
	}
 	elseif reference0 == "md5 miss" //This is the final message displayed when you've run into an md5 error below at some point.
	{
		"\1\s[10]The MD5 hash of the files don't match.\e"
 	}
	else //for other errors
 	{
 		"\1\s[10]The update could not be completed.\w8\0\s[0]The error is '%(reference0)'.\e"
	}
 }


 //---- OnUpdate.OnDownloadBegin ------------------------------------------------
 //This dialogue sets up the cool progress bar. I think it's real neat and since I plan on using this trimmed down version I'm keeping it in here.
 
 //reference0 - file being downloaded
 //reference1 - number of file being downloaded, as in "this is file 1 out of 9"
 //reference2 - overall number of files to download, counting zero. so if there are ten files, it'll display as 9.
 //reference3 - what's being updated - ghost, shell, balloon, plugin, headline, baseware

 //Big thanks to Malakin for helping me figure it out.
 
 
//---- Downloading the update ------------------------------------------------
OnUpdate.OnDownloadBegin
 {
	 "\_q\b[2]Downloading %(reference0)...\n\n"
		 --
		 //okay, you can use the %(reference) envelope here to display the value, but you can't actually DO anything with it as is. You have to convert it into an integer using TOINT, THEN you can use it in functions and such. I should get back to that one person trying to do that whack a mole game with this info, this was the exact same problem they ran into.
		 //+ 1 because otherwise the count starts at 0 and it looks weird. Basic format is variablename = TOINT(target you're turning into an integer, in this case the references)
		 
		Update_Process = TOINT(reference1) + 1
		Update_Total = TOINT(reference2) + 1
		Update_Remaining = Update_Total - Update_Process
		
		//defining starting points
		PointA = 1 
		PointB = 1
		
		//defining text buffers beforehand, otherwise they don't display right
		_txt = ""
		
		//loop calculates how many check boxes to display based on the variables above, the if check is for displaying the ascii border on the sides
		while PointA <= Update_Process 
		{
		_txt += "☑" 
		PointA++ 
		} 
		//see above except for blank boxes
		while PointB <= Update_Remaining 
		{
		_txt += "☐" 
		PointB++ 
		}
		--
		//using the text buffers to display the correct number of boxes
		"%(_txt)\n\n%(Update_Process) of %(Update_Total)"
		--
		//flavortext - i don't want to lose this, i hope there's a way i can keep all of it
		
		 	if "aitalk" _in_ reference0 //this is checking to see what kind of files are being downloaded. In this case, it's looking for files called aitalk in the download queue.
			{
				"\n\n\_q\0\s[73]More dialogue, what a surprise.\w8\1\s[1063]Cool!\w9\w9\e"
				"\n\n\_q\0\s[73]More stuff for us to say.\w8\1\s[1003]I bet it'll be neat!\w9\w9\e"
			}
			else //for files not specified above
			{
			""
			} 
		
		--
		"\w5\e"
 }

 //---- OnUpdate.OnMD5CompareBegin ---------------------------------------------------
 //This checks the hash value of the files in the directory and the files listed in updates.dau, I believe.
 
OnUpdate.OnMD5CompareBegin
 {
	//"\1\s[10]Checking the MD5 value.\e"
 }

 //---- OnUpdate.OnMD5CompareComplete --------------------------------------------------
 //After they've checked the MD5 value and it matches.
 
OnUpdate.OnMD5CompareComplete
 {
	//"\0\s[0]MD5 check good.\e"
}

 //---- OnUpdate.OnMD5CompareFailure ---------------------------------------------------
 //If the MD5 values don't match, meaning if the file is missing or damaged or incomplete in some way.
 
OnUpdate.OnMD5CompareFailure
 {
	"\0\s[0]The MD5 values don't match.\w8\e"
 }

 
 
 //**** Headlines and RSS Feeds *********************************************************
 //This section has to do with the RSS feeds option on your ghost. If you drag and drop a url on them, they'll add it to a list you can access via the right-click menu, and they'll tell you the last set of updates for the site. This works best with RSS feeds I think, but you can experiment with other sites to see how it works.
 //The headlines you see under the tab are in the headline folder under your base SSP install. So it'd be SSP\headlines. You should see the folders for each linked headline in there. Likewise, your RSS feeds you've added will be under SSP\rss and I don't think that option will appear in the headlines/RSS tab until you add an RSS feed to a ghost. If you want to clear your RSS feeds or headlines, just delete either of those two folders.
 

 //---- OnHeadlinesenseBegin -----------------------------------------------------------
 //This dialogue comes up when you select something in your RSS feed as an intro, like the other On[Thing]Begin things we've seen so far.
 
OnHeadlinesenseBegin
 {
	"\0\s[0]You've selected %(reference0).\e"
 }

 //---- OnHeadlinesense.OnFind --------------------------------------------------------
 //This actually displays the feed.
 
OnHeadlinesense.OnFind
{
	//----  What page You're on
 	if reference2 == "First" || reference2 == "First and Last"
	{
 		//---- First page
		"\0\b2\s[0]%(reference0):"
 	}
	elseif reference2 == "Next"
 	{
		//---- Second page
 		"\0\b2\s[0]%(reference0):"
	}
 	elseif reference2 == "Last"
	{
 		//---- Last page
		"\0\b2\s[0]%(reference0):"
 	}
	--
 	//---- Headlines
	"\n\n%reference3\n"
 	--
	//---- Pages
 	if reference2 == "First" || reference2 == "Next"
	{
 		//---- Bottom buttons
		"\![*]\q[Next,] - \![*]\q[Stop,Headline_Cancel]\e"
 	}
	else
 	{
		//---- Bottom buttons
 		"\![*]\q[Stop,Headline_Cancel]\e"
 	}
	
}


Select.Headline_Cancel
{
	"\0\s[0]Headline viewing complete.\e"
}

 //---- OnHeadlinesenseComplete -------------------------------------------------------
 //This is an odd function. As far as I can gather, this is if the headline information gathering was successful, but there's no new information to report. Possibly if none of the feeds have updated? I'm a little fuzzy on this one.
 
OnHeadlinesenseComplete
 {
	"\0\s[0]No update. %(reference0).\e"
	//reference0 here supposedly always stores the value no update?
 }

 //---- OnHeadlinesenseFailure ---------------------------------------------------------
 //This one is more clearly for when the ghost can't get the information it needs about the RSS feed in question.
 
OnHeadlinesenseFailure
  {
	"\0\s[0]The feed can't updated.\w8\1\s[10]Why not?\w8\0\s[0]\n\n[half]"
 	--
	if reference0 == "can't download" //if they can't download the rss feed for some reason
 	{
		"It can't be downloaded."
 	}
	elseif reference0 == "can't analyze" //if they can't read the file for some reason
 	{
		"It can't be analyzed."
 	}
	else //other errors
 	{
		"I don't know."
 	}
	--
 	"\e"
}


//**** Ghost Creation and Updating ******************************************************
//These next few are related to creating updates2.dau and .nar files for your ghosts.


 //---- OnUpdatedataCreating -----------------------------------------------------------
 //This will begin the creation of the updates2.dau file.
 
OnUpdatedataCreating
 {
	"\1\s[10]Creating the updates2.dau file.\e"
 }

 //---- OnUpdatedataCreated -------------------------------------------------------------
 //After the updates2.dau file has been successfully created.
 
OnUpdatedataCreated
 {
	"\0\s[0]Successfully created updates2.dau.\e"
 }

 //---- OnNarCreating ------------------------------------------------------------------
 //Along the same lines, this is when they begin creating a .nar file for your ghost.
 
OnNarCreating
 {
	"\0\s[0]Creating the .nar file.\e"
 }

 //---- OnNarCreated -------------------------------------------------------------------
 //After the nar file has been successfully created.
 
OnNarCreated
 {
	"\0\s[0]Successfully created '%(reference0)'.\e"
	//reference0 here will be the filename of the nar you just created. It should drop the nar in the folder where all your ghosts are listed, ssp\ghost\.
 }

 //****　Clock Synchronization　**********************************************************
//**** 미카 (http://homepage2.nifty.com/ko-ki/)의 사전을 참고했습니다．감사＞こ 나무 성
//This set of functions was done by the above Korean coder, I think. I'll leave their comment there untouched. 
 

 //----OnSNTPBegin ------------------------------------------------------------------
 //As with the others you've seen above, this is the beginning bit of dialogue for this process.
 
OnSNTPBegin
 {
	"\0\s[0]We're going to check the time.\w9\1\s[10]We are connecting to %(reference0).\e"
	//%(reference0) here is the site they'll be using to check your clock.
 }


 //----　OnSNTPCompare----------------------------------------------------------
 //Now the ghost is going to compare the current time of your computer's system to the time of the site they connected to. 
 
OnSNTPCompare
 {
 	"Retrieved Time: %reference1[1]/%reference1[2]/%reference1[0] %reference1[3]:%reference1[4]:%reference1[5]\w2\n/
	Your Time: %reference2[1]/%reference2[2]/%reference2[0] %reference2[3]:%reference2[4]:%reference2[5]\w2\n/
 	\n"
	--
 	if reference3 == 0 //if your clock is already accurate.
	{
 		"\0\s[0]Your clock is accurate.\e"
	}
 	else //if your clock doesn't match
	{
 		"\0\s[0]Your clock doesn't match.\w6\nShould we fix it?\n\n[half]/
		\![*]\q[Fix it,OnSNTPEXECUTE]\n/
 		\![*]\q[Leave it alone,OnSNTPCANCEL]\e"
	}
 }

 //----　OnSNTPEXECUTE ------------------------------------------------------------------
 //After they've fixed your clock. Note the \6 tag - that's what actually changes the clock. Do not remove that tag.
 
OnSNTPEXECUTE
 {
	"\0\s[0]The clock has been fixed.\6\e"
 }

 //----　OnSNTPCANCEL ------------------------------------------------------------------
 //If you decide not to change your clock when they tell you it doesn't match.
 
OnSNTPCANCEL
 {
	"\0\s[0]The user decided not to change the clock.\e"
 }

 //----　OnSNTPFailure ------------------------------------------------------------------
 //If they can't change the clock for some reason, possibly because the site timed out but it could be anything.
 
OnSNTPFailure
 {
	"\0\s[0]The clock wasn't changed.\w8\1\s[10]Something went wrong.\e"
 }


 //--OnDisplayChange----------------------------------------------------------------
 //This is when you change the resolution of your monitor while your ghost is running.
 
OnDisplayChange
 {
	displaybpp    = reference0
 	displaywidth  = reference1
	displayheight = reference2
 }



 //---- OnScreenSaverStart -------------------------------------------------------
 //This happens if your ghost is running when your screensaver starts up. I've never got this to trigger but I love this idea, and I feel like there's a way to do it I haven't figured out yet. So you can skip these for now if you want, but if I do ever get it working, I'll come back and make a note of it.
 
OnScreenSaverStart
 {
	"\0\s[0]The screensaver is starting.\w7\1\s[10]Wiggle your mouse!\e"
 }

 //---- OnScreenSaverEnd -------------------------------------------------------
 //When you wiggle your mouse and stop your screensaver.
 
OnScreenSaverEnd
 {
	"\0\s[0]The screensaver is gone.\e"
 }


 //---- OnApplicationBoot ---------------------------------------------------------------
 //This supposedly is for when a program starts but I have honestly never gotten it to work or seen it happen. I wouldn't sweat these three related functions too much.
 
OnApplicationBoot
 {
	"\0\s[0]%(reference0) just started.\e"
 }

 //---- OnApplicationClose --------------------------------------------------------------
 //See above, but for the program closing.
 
OnApplicationClose
 {
	"\0\s[0]%(reference0) has closed.\e"
 }

 //---- OnApplicationFileOpen ----------------------------------------------------------
 //I believe this is for when the program detailed above opens a document file of some kind.
 
OnApplicationFileOpen
 {
	"\0\s[0]Opening %(reference1).\e"
 }




 //---- OnBatteryLow -----------------------------------------------------------------
 //This is for when your laptop's battery is low.
 
OnBatteryLow
 {
	"\1\s[10]The laptop's battery is low. \w8\0\s[0]There is %(reference0) power left.\e"
	//reference0 here is the amount of battery power.
 }
 
 //--OnBatteryCritical-----------------------------------------------------------------
 //Likewise, this is for if your battery is REALLY low.
 
OnBatteryCritical
{
	"\0\s[0]The laptop's battery is critically low.\e"
}
 
 
 //--OnShellScaling
 //If you right click the ghost, you can go to Shell Scaling, which lists a number of different percentages. Those are the percentages your ghost can be scaled in size up or down.
 
OnShellScaling
{
	if reference0 >= 150 //this number is the percentage that you're scaling the ghost up to. In this case, it's 150%.
	{
		"\0\s[0]We are now 150% our original size.\w8\1\s[10]Bigger.\e"
	}
	elseif reference0 == 100 //this is 100%
	{
		"\1\s[10]We are normal sized.\e"
	}
	elseif reference0 == 50 //this is 50%.
	{
		"\0\s[0]We are now 50% our original size.\w8\1\s[10]Smaller.\e"
	}
}